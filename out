#!/usr/bin/env bash

CURL_OPTION=""

set -e
exec 3>&1
exec 1>&2
#set -x

function evaluate {
  __var=$1
  # escape ( and ) from markdown
  __var="${__var//\(/\\(}"
  __var="${__var//\)/\\)}"
  __var="${__var//\:/\\:}"
  __var=`eval echo $__var`
  echo $__var
}

payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > "${payload}" <&0

format="markdown"

actionName=$(evaluate "$(jq -r '.params.actionName // "Open Concourse"' < "${payload}")")

actionTarget=$(evaluate "$(jq -r '.params.actionTarget // "https://concourse-ci.org/"' < "${payload}")")

title=$(evaluate "$(jq -r '.params.title // "Concourse CI"' < "${payload}")")

text=$(evaluate "$(jq -r '.params.text // ""' < "${payload}")")
text_file="$1/"$(evaluate "$(jq -r '.params.text_file // ""' < "${payload}")")

# - 'text' always overrides 'text_file'
# - '_(NO MSG)_' being the default if neither are provded
# - If text file is missing: _(NO MSG FILE)_
# - If text file is blank: _(EMPTY MSG FILE)_"
text_output="_(NO MSG)_"
if [[ -n "${text_file}" ]]; then
  if [[ ! -f "${text_file}" ]]; then
    text_output="_(NO MSG FILE)_"
  else
    text_output="$(cat "${text_file}")" && \
              [[ -z "${text_output}" ]] && \
			  text_output="_(EMPTY MSG FILE)_"
  fi
fi
[[ -n "${text}" ]] && text_output="${text}"

# style should be one of 'good', 'attention', 'warning', 'default'
# good (green) if the build succeeded
# attention (red) if the build failed
# warning (yellow) if the build errored
# default (gray) by default
# look for pass/fail/error in the title
style=$(evaluate "$(jq -r '.params.style // "default"' < "${payload}")")
[[ "${title,,}" =~ (pass|succeed|success) ]] && style="good"
[[ "${title,,}" =~ (fail) ]] && style="attention"
[[ "${title,,}" =~ (error|warning) ]] && style="warning"
# or in the text_output if we didn't find it in the title
[[ "${style}" == "default" ]] && [[ "${text_output,,}" =~ (pass|succeed|success) ]] && style="good"
[[ "${style}" == "default" ]] && [[ "${text_output,,}" =~ (fail) ]] && style="attention"
[[ "${style}" == "default" ]] && [[ "${text_output,,}" =~ (error|warning) ]] && style="warning"

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

body=$(jq -n --arg format "${format}" \
  --arg actionName "${actionName}" \
  --arg actionTarget "${actionTarget}" \
  --arg title "${title}" \
  --arg text "${text_output}" \
  --arg style "${style}" \
  -f ${DIR}/card.jq)

webhook_url="$(jq -r '.source.url // empty' < "${payload}")"

proxy_url="$(jq -r '.source.proxy_url // empty' < "${payload}")"
proxy_port="$(jq -r '.source.proxy_port // empty' < "${payload}")"
proxy_username="$(jq -r '.source.proxy_username // empty' < "${payload}")"
proxy_password="$(jq -r '.source.proxy_password // empty' < "${payload}")"
skip_cert_verification="$(jq -r '.source.skip_cert_verification // empty' < "${payload}")"
verbose="$(jq -r '.source.verbose // empty' < "${payload}")"
silent="$(jq -r '.source.silent // empty' < "${payload}")"

if [ -z ${proxy_url} ] || [ -z ${proxy_port} ]; then
  PROXY_OPTIONS=""
else
  PROXY_OPTIONS="--proxy ${proxy_url}:${proxy_port}" 
fi

if [ -z ${proxy_url} ] || [ -z ${proxy_port} ] || [ -z ${proxy_username} ] || [ -z ${proxy_password} ]; then
  PROXY_OPTIONS="${PROXY_OPTIONS}"
else
  PROXY_OPTIONS="--proxy-user ${proxy_username}:${proxy_password} ${PROXY_OPTIONS}" 
fi

if [ -z ${skip_cert_verification} ]; then
  CURL_OPTION="${CURL_OPTION}"
else
  CURL_OPTION="-k ${CURL_OPTION}" 
fi

if [ -z ${verbose} ]; then
  CURL_OPTION="${CURL_OPTION}" 
else
  CURL_OPTION="-v ${CURL_OPTION}" 
fi

if [ -z ${silent} ]; then
  CURL_OPTION="${CURL_OPTION}" 
else
  CURL_OPTION="-s ${CURL_OPTION}" 
fi

redacted_webhook_url=$(echo "${webhook_url}" | sed -e 's#/\([^/\.]\{2\}\)[^/.]\{5,\}\([^/.]\{2\}\)#/\1â€¦\2#g' | jq -R .)

url_path="$(echo ${webhook_url} | sed -e "s/https\{0,1\}:\/\/[^\/]*\(\/[^?&#]*\).*/\1/")"

curl ${CURL_OPTION} ${PROXY_OPTIONS} -H 'Content-Type: application/json' -d "${body}" "${webhook_url}" 2>&1 | sed -e "s#${url_path}#***WEBHOOK URL REDACTED***#g"

timestamp=$(date +%s)
metadata="$(cat <<EOF
{
  "version": {"timestamp": "${timestamp}"},
  "metadata": [
    {"name": "url", "value": ${redacted_webhook_url}},
    {"name": "BUILD_PIPELINE_NAME", "value": "${BUILD_PIPELINE_NAME}"}
  ]
}
EOF
)"

echo "$metadata"  >&3

